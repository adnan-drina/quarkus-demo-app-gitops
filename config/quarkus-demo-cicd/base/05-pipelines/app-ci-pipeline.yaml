apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  creationTimestamp: null
  name: app-ci-pipeline
  namespace: quarkus-demo-cicd
spec:
  params:
  - name: REPO
    type: string
  - name: COMMIT_SHA
    type: string
  - name: TLSVERIFY
    type: string
  - name: BUILD_EXTRA_ARGS
    type: string
  - name: IMAGE
    type: string
  - name: GIT_REF
    type: string
  - name: COMMIT_DATE
    type: string
  - name: COMMIT_AUTHOR
    type: string
  - name: COMMIT_MESSAGE
    type: string
  - name: GIT_REPO
    type: string
  tasks:
  - name: clone-source
    params:
    - name: url
      value: $(params.GIT_REPO)
    - name: revision
      value: $(params.GIT_REF)
    - name: deleteExisting
      value: "true"
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-data

  - name: package-app
    taskRef:
      kind: Task
      name: maven
    runAfter:
      - clone-source
    workspaces:
      - name: source
        workspace: shared-data
      - name: maven-settings
        workspace: maven-settings
    params:
      - name: GOALS
        value:
          - -DskipTests
          - clean
          - package

  - name: unit-tests
    taskRef:
      kind: Task
      name: maven
    runAfter:
      - package-app
    workspaces:
      - name: source
        workspace: shared-data
      - name: maven-settings
        workspace: maven-settings
    params:
      - name: GOALS
        value:
          - test

    - name: code-analysis
      taskRef:
        name: maven
      runAfter:
        - unit-tests
      workspaces:
        - name: source
          workspace: workspace
        - name: maven-settings
          workspace: maven-settings
      params:
        - name: GOALS
          value:
            - -DskipTests
            - install
            - sonar:sonar
#            - -f
#            - spring-petclinic
#            - -Dsonar.host.url=http://sonarqube:9000
#            - -Dsonar.userHome=/tmp/sonar
#            - -DskipTests=true

  #  - name: dependency-report
  #    taskRef:
  #      name: dependency-report
  #    runAfter:
  #      - source-clone
  #    workspaces:
  #      - name: source
  #        workspace: workspace
  #      - name: maven-settings
  #        workspace: maven-settings
  #    params:
  #      - name: SOURCE_DIR
  #        value: spring-petclinic
  #  - name: release-app
  #    taskRef:
  #      name: maven
  #    runAfter:
  #      - code-analysis
  #      - dependency-report
  #      - unit-tests
  #    workspaces:
  #      - name: source
  #        workspace: workspace
  #      - name: maven-settings
  #        workspace: maven-settings
  #    params:
  #      - name: GOALS
  #        value:
  #          - deploy
  #          - -f
  #          - spring-petclinic
  #          - -DskipTests=true
  #          - -DaltDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-releases/
  #          - -DaltSnapshotDeploymentRepository=nexus::default::http://nexus:8081/repository/maven-snapshots/
  #  - name: build-image
  #    taskRef:
  #      name: s2i-java-11
  #    runAfter:
  #      - release-app
  #    params:
  #      - name: TLSVERIFY
  #        value: "false"
  #      - name: MAVEN_MIRROR_URL
  #        value: http://nexus:8081/repository/maven-public/
  #      - name: PATH_CONTEXT
  #        value: spring-petclinic/target
  #      - name: IMAGE_NAME
  #        value: $(params.APP_IMAGE)
  #      - name: IMAGE_TAG
  #        value: $(params.APP_IMAGE_TAG)
  #    workspaces:
  #      - name: source
  #        workspace: workspace
  #  - name: config-clone
  #    taskRef:
  #      name: git-clone
  #      kind: ClusterTask
  #    workspaces:
  #      - name: output
  #        workspace: workspace
  #    runAfter:
  #      - build-image
  #    params:
  #      - name: url
  #        value: $(params.APP_CONFIG_GIT)
  #      - name: subdirectory
  #        value: spring-petclinic-config
  #      - name: deleteExisting
  #        value: "true"
  #  - name: tests-clone
  #    taskRef:
  #      name: git-clone
  #      kind: ClusterTask
  #    workspaces:
  #      - name: output
  #        workspace: workspace
  #    runAfter:
  #      - build-image
  #    params:
  #      - name: url
  #        value: $(params.APP_TESTS_GIT)
  #      - name: subdirectory
  #        value: spring-petclinic-gatling
  #      - name: deleteExisting
  #        value: "true"
  #  - name: deploy-dev
  #    taskRef:
  #      name: deploy-app
  #    runAfter:
  #      - config-clone
  #      - tests-clone
  #    params:
  #      - name: DEPLOYMENT_NAME
  #        value: spring-petclinic
  #      - name: CURRENT_IMAGE
  #        value: "quay.io/siamaksade/spring-petclinic:latest"
  #      - name: NEW_IMAGE_NAME
  #        value: $(params.APP_IMAGE)
  #      - name: NEW_IMAGE_TAG
  #        value: $(params.APP_IMAGE_TAG)
  #      - name: NEW_IMAGE_DIGEST
  #        value: $(tasks.build-image.results.IMAGE_DIGEST)
  #      - name: NAMESPACE
  #        value: demo-dev
  #      - name: KUSTOMIZE_OVERLAY_DIR
  #        value: environments/dev
  #    workspaces:
  #      - name: source
  #        workspace: workspace
  #        subPath: spring-petclinic-config
  #  - name: int-test
  #    taskRef:
  #      name: openshift-client
  #      kind: ClusterTask
  #    runAfter:
  #      - deploy-dev
  #    params:
  #      - name: SCRIPT
  #        value: |
  #          sleep $(($RANDOM % 40 + 20))
  #  - name: perf-test
  #    taskRef:
  #      name: gatling
  #    runAfter:
  #      - deploy-dev
  #    params:
  #      - name: APP_URL
  #        value: "http://spring-petclinic.demo-dev.svc.cluster.local:8080"
  #    workspaces:
  #      - name: simulations
  #        workspace: workspace
  #        subPath: spring-petclinic-gatling

  #
  - name: build-image
    params:
    - name: TLSVERIFY
      value: $(params.TLSVERIFY)
    - name: BUILD_EXTRA_ARGS
      value: --label=io.openshift.build.commit.author='$(params.COMMIT_AUTHOR)' --label=io.openshift.build.commit.date='$(params.COMMIT_DATE)' --label=io.openshift.build.commit.id='$(params.COMMIT_SHA)' --label=io.openshift.build.commit.message='$(params.COMMIT_MESSAGE)' --label=io.openshift.build.commit.ref='$(params.GIT_REF)'
    - name: IMAGE
      value: $(params.IMAGE)
    runAfter:
    - unit-tests
    taskRef:
      kind: ClusterTask
      name: buildah
    workspaces:
    - name: source
      workspace: shared-data
  workspaces:
  - description: This workspace will receive the cloned git repo.
    name: shared-data
  - description: This workspace containes Maven settings.
    name: maven-settings
